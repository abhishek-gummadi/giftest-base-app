'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['\n  box-sizing: border-box;\n  ', '\n  ', '\n'], ['\n  box-sizing: border-box;\n  ', '\n  ', '\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _styledComponentsBreakpoint = require('styled-components-breakpoint');

var _reactCreateComponentFromTagProp = require('react-create-component-from-tag-prop');

var _reactCreateComponentFromTagProp2 = _interopRequireDefault(_reactCreateComponentFromTagProp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var GridUnitComponent = (0, _reactCreateComponentFromTagProp2.default)({
  tag: 'div',
  prop: 'component',
  propsToOmit: ['width', 'visible']
});

//TODO: fix issues with partial pixels

var widthMixin = function widthMixin(_ref) {
  var width = _ref.width,
      theme = _ref.theme;
  return (0, _styledComponentsBreakpoint.map)(width, function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    switch (value) {

      case 'min':
        return '\n        flex-grow: 0;\n        flex-basis: auto;\n        width: auto;\n        max-width: none;\n      ';

      case 'max':
        return '\n        flex-grow: 1;\n        flex-basis: auto;\n        width: auto;\n        max-width: none;\n      ';

      default:
        var pct = Math.round(value * 100);
        return '\n        flex-basis: ' + pct + '%;\n        max-width: ' + pct + '%;\n      ';

    }
  }, theme.breakpoints);
};

var visibilityMixin = function visibilityMixin(_ref2) {
  var visible = _ref2.visible,
      theme = _ref2.theme;
  return (0, _styledComponentsBreakpoint.map)(visible, function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    if (value) {
      return 'display: inline-block;'; //TODO: maybe this shouldn't be inline block??
    } else {
      return 'display: none;';
    }
  }, theme.breakpoints);
};

var GridUnit = (0, _styledComponents2.default)(GridUnitComponent)(_templateObject, widthMixin, visibilityMixin);

GridUnit.propTypes = {
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
  visible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object])
};

GridUnit.defaultProps = {
  width: 1,
  visible: true
};

exports.default = GridUnit;